openapi: 3.0.3
servers:
  - url: /v1
info:
  description: |-
    User svc OpenAPI 3.0 specification.
  version: 1.0.0-SNAPSHOT
  title: Logging system - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: xxx@xxx.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: logging
    description: Logging configuration
    externalDocs:
      description: TODO
      url: 'http://swagger.io'
paths:
  /logger:
    get:
      tags:
        - logging
      summary: Get loggers configurations
      description: ''
      operationId: getLoggerConfigurations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoggerConfiguration'
  '/logger/{name}':
    get:
      tags:
        - logging
      summary: Get loggers configuration
      description: ''
      operationId: getLoggerConfiguration
      parameters:
        - name: name
          in: path
          description: 'Logger name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggerConfiguration'
        '404':
          description: Logger not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    LogLevel:
      type: string
      enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - FATAL
        - OFF
    LoggerConfiguration:
      properties:
        name:
          type: string
          example: 'com.jc'
        effectiveLevel:
          $ref: '#/components/schemas/LogLevel'
        configuredLevel:
          $ref: '#/components/schemas/LogLevel'
      type: object
      required:
        - name
        - effectiveLevel

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT