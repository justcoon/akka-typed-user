include classpath("discovery-local.conf")

akka {
  actor {
    provider = cluster
//    provider = akka.cluster.ClusterActorRefProvider

    allow-java-serialization = off

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "scalapb.GeneratedMessage" = proto
      "java.io.Serializable" = kryo
    }
  }

  //akka 2.6
  remote {
    enabled-transports = ["akka.remote.artery.canonical"]
    artery.canonical {
      hostname = "127.0.0.1"
      //      port = ${REMOTE_PORT}
      port = 2551
    }
  }

  // The following settings are for super fast automatic removal of unreachable nodes and not suitable for production!
  cluster {
    //    auto-down-unreachable-after = 0 seconds
    //    unreachable-nodes-reaper-interval = 250 milliseconds
    //
    //    failure-detector {
    //      acceptable-heartbeat-pause = 1 second
    //      hearbeat-interval = 250 milliseconds
    //      threshold = 4.0
    //    }


    seed-nodes = [
      "akka://user@127.0.0.1:2551",
      "akka://user@127.0.0.1:2552",
      "akka://user@127.0.0.1:2553"
    ]

    min-nr-of-members = 1
    auto-down-unreachable-after = 30s
  }

  //  extensions = [
  //    akka.persistence.Persistence,
  //    de.heikoseeberger.constructr.ConstructrExtension
  //  ]

  extensions = [
    akka.persistence.Persistence
  ]

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
  }

  http.server.preview.enable-http2 = on
}

akka.management {
  health-checks {
    readiness-checks {
      example-ready = "com.jc.user.UserHealthCheck"
    }
  }
}


akka.persistence.cassandra {
  journal {
    keyspace = "c_user_journal"
    keyspace-autocreate = on
    tables-autocreate = on
    write-static-column-compat = off
  }
  snapshot {
    keyspace = "c_user_snapshot"
    keyspace-autocreate = on
    tables-autocreate = on
  }
  query {
    refresh-interval = 20ms
  }
  events-by-tag {
    first-time-bucket = "20200120T00:00"
  }
}

akka.projection.cassandra {
  offset-store {
    keyspace = "c_user_projection"
    table = "offset_store"
  }
}


elasticsearch {
  addresses = ["localhost:9200"]
  index-name = "c_user"
}

kafka {
  addresses = ["localhost:9092"]
  topic = "c-user"
}

jwt {
  secret = "mySecret"
  expiration = 604800000 // in milliseconds
}

rest-api {
  address = 0.0.0.0
  port = 8000
  repository-timeout = 250 milliseconds
}


grpc-api {
  address = 0.0.0.0
  port = 8010
  repository-timeout = 250 milliseconds
}


kamon {
  environment {
    service = "user"
  }

  metric {
    tick-interval = 2500 millis
  }

  trace {
    tick-interval = 2 seconds
  }

  //  instrumentation.akka {
  //    http {
  //      //https://github.com/kamon-io/kamon-akka-http/blob/master/kamon-akka-http/src/main/resources/reference.conf
  //      server {
  //        propagation {
  //          enabled = yes
  //          channel = default
  //        }
  //
  //        metrics {
  //          enabled = yes
  //        }
  //      }
  //      client {
  //        propagation {
  //          enabled = yes
  //          channel = default
  //        }
  //      }
  //    }
  //
  //    //    https://github.com/kamon-io/kamon-akka/blob/master/kamon-akka/src/main/resources/reference.conf
  //    filters {
  //
  //      actors {
  //        doomsday-wildcard = on
  //
  //        track {
  //          includes = ["*/user/**"]
  //          excludes = []
  //          //    excludes = [ "helloAkka/user/howdyGreeter" ]
  //        }
  //
  //        trace {
  //          includes = ["*/user/**", "*/system/sharding**"]
  //          excludes = []
  //        }
  //      }
  //
  //      dispatcher {
  //        includes = ["**"]
  //        excludes = []
  //      }
  //    }
  //
  //    cluster-sharding.shard-metrics-sample-interval = 100 millisecond
  //  }

  instrumentation.akka {
    filters {

      actors {
        track {
          includes = [ "*/user/tracked-*", "*/user/measuring-*", "*/user/clean-after-collect", "*/user/stop", "*/user/repointable*", "*/" ]
          excludes = [ "*/system/**", "*/user/tracked-explicitly-excluded", "*/user/non-tracked-actor" ]
        }

        trace {
          excludes = [ "*/user/filteredout*" ]
        }

        start-trace {
          includes = [ "*/user/traced*" ]
          excludes = []
        }
      }

      routers {
        includes = [ "*/user/tracked-*", "*/user/measuring-*", "*/user/cleanup-*", "*/user/picking-*", "*/user/stop-*" ]
        excludes = [ "*/user/tracked-explicitly-excluded-*"]
      }

      dispatchers {
        includes = [ "**" ]
        excludes = [ "explicitly-excluded" ]
      }

      groups {
        auto-grouping {
          excludes = [ "*/user/ActorMetricsTestActor", "*/user/SecondLevelGrouping"]
        }

        group-of-actors {
          includes = ["*/user/group-of-actors-*"]
          excludes = []
        }

        second-level-group {
          includes = ["*/user/second-level-group/*"]
        }

        group-of-routees {
          includes = ["*/user/group-of-routees*"]
          excludes = []
        }

      }
    }

    cluster-sharding.shard-metrics-sample-interval = 100 millisecond
  }

//  metric {
//    tick-interval = 1 hour
//
//    factory {
//      default-settings {
//        range-sampler.auto-update-interval = 10 millis
//      }
//
//      custom-settings {
//        "akka.actor.mailbox-size" {
//          auto-update-interval = 1 millisecond
//        }
//
//        "akka.group.members" {
//          auto-update-interval = 1 millisecond
//        }
//      }
//
//    }
//  }

  prometheus {
    embedded-server.port = 9080
  }
}


//kanela {
//  log-level = "DEBUG"
//}
